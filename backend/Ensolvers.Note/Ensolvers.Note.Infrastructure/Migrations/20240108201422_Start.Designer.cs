// <auto-generated />
using System;
using Ensolvers.Note.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ensolvers.Note.Infrastructure.Migrations
{
    [DbContext(typeof(NoteContext))]
    [Migration("20240108201422_Start")]
    partial class Start
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Ensolvers.Note.Domain.Note", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("Ensolvers.Note.Domain.Tag", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NoteId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("NoteId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Ensolvers.Note.Domain.Tag", b =>
                {
                    b.HasOne("Ensolvers.Note.Domain.Note", null)
                        .WithMany("Tags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Ensolvers.Note.Domain.ValueObjects.TagColor", "BgColor", b1 =>
                        {
                            b1.Property<string>("TagId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Alpha")
                                .HasColumnType("int");

                            b1.Property<int>("Blue")
                                .HasColumnType("int");

                            b1.Property<int>("Green")
                                .HasColumnType("int");

                            b1.Property<int>("Red")
                                .HasColumnType("int");

                            b1.HasKey("TagId");

                            b1.ToTable("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.OwnsOne("Ensolvers.Note.Domain.ValueObjects.TagColor", "Color", b1 =>
                        {
                            b1.Property<string>("TagId")
                                .HasColumnType("varchar(255)");

                            b1.Property<int>("Alpha")
                                .HasColumnType("int");

                            b1.Property<int>("Blue")
                                .HasColumnType("int");

                            b1.Property<int>("Green")
                                .HasColumnType("int");

                            b1.Property<int>("Red")
                                .HasColumnType("int");

                            b1.HasKey("TagId");

                            b1.ToTable("Tags");

                            b1.WithOwner()
                                .HasForeignKey("TagId");
                        });

                    b.Navigation("BgColor")
                        .IsRequired();

                    b.Navigation("Color")
                        .IsRequired();
                });

            modelBuilder.Entity("Ensolvers.Note.Domain.Note", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
